{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport PostUpdate from \"@/components/PostUpdate.vue\";\nimport BlockConfirmation from \"@/components/BlockConfirmation.vue\";\nimport { UsersService } from \"@/services/UsersService\";\nimport { PostsService } from \"@/services/PostsService\";\nimport { LikesService } from \"@/services/LikesService\";\nimport { DislikesService } from \"@/services/DislikesService\";\nimport profilePicture from \"@/assets/user-profile-picture.png\";\nexport default {\n  name: \"PostShow\",\n  components: {\n    PostUpdate,\n    BlockConfirmation\n  },\n  props: {\n    id: {\n      type: Number,\n      required: true\n    },\n    userId: {\n      type: Number,\n      required: true\n    },\n    firstname: {\n      type: String,\n      required: true\n    },\n    lastname: {\n      type: String,\n      required: true\n    },\n    createdAt: {\n      type: String,\n      required: true\n    },\n    updatedAt: {\n      type: String\n    },\n    imageUrl: {\n      type: String\n    },\n    content: {\n      type: String,\n      required: true\n    },\n    mediaUrl: {\n      type: String\n    },\n    likes: {\n      type: Number,\n      default: 0\n    },\n    usersWhoLiked: {\n      type: Array\n    },\n    dislikes: {\n      type: Number,\n      default: 0\n    },\n    usersWhoDisliked: {\n      type: Array\n    }\n  },\n\n  data() {\n    return {\n      user: {\n        id: null,\n        firstname: null,\n        lastname: null,\n        email: null,\n        imageUrl: null,\n        role: null\n      },\n      isAllowed: false,\n      isModified: false,\n      isNotDeleted: true,\n      liked: false,\n      disliked: false,\n      defautlImageUrl: profilePicture,\n      revealPostUpdate: false,\n      idOfThePostToUpdate: this.id,\n      updatedMediaUrl: null,\n      updatedContent: null,\n      updatedTime: null,\n      numberOfLikes: 0,\n      numberOfDislikes: 0,\n      revealConfirmation: false,\n      messageConfirmation: \"\"\n    };\n  },\n\n  methods: {\n    isAuthor() {\n      if (this.userId === this.user.id) {\n        this.isAllowed = true;\n      }\n    },\n\n    isAdmin() {\n      if (this.user.role === \"admin\") {\n        this.isAllowed = true;\n      }\n    },\n\n    hasBeenModified() {\n      if (this.updatedAt !== this.createdAt) {\n        this.isModified = true;\n      }\n    },\n\n    computeLikes() {\n      this.numberOfLikes = this.likes;\n    },\n\n    computeDislikes() {\n      this.numberOfDislikes = this.dislikes;\n    },\n\n    doUserLike() {\n      let likedArray = [];\n\n      for (let k = 0; k < this.usersWhoLiked.length; k++) {\n        likedArray.push(this.usersWhoLiked[k].UserId);\n      }\n\n      if (likedArray.indexOf(this.user.id) !== -1) {\n        this.liked = true;\n      }\n    },\n\n    doUserDislike() {\n      let dislikedArray = [];\n\n      for (let k = 0; k < this.usersWhoDisliked.length; k++) {\n        dislikedArray.push(this.usersWhoDisliked[k].UserId);\n      }\n\n      if (dislikedArray.indexOf(this.user.id) !== -1) {\n        this.disliked = true;\n      }\n    },\n\n    dateFormat: date => {\n      return date.split(\"T\")[0].split(\"-\").reverse().join(\"/\");\n    },\n    timeFormat: time => {\n      return time.split(\"T\")[1].split(\":\").slice(0, 2).join(\":\");\n    },\n    username: (firstname, lastname) => {\n      return firstname + \" \" + lastname;\n    },\n\n    async addLike() {\n      const credentials = {\n        PostId: this.id\n      };\n\n      try {\n        if (this.liked) {\n          await LikesService.deleteLike(credentials.PostId);\n          this.numberOfLikes--;\n          this.liked = false;\n        } else {\n          if (this.disliked) {\n            this.numberOfDislikes--;\n            this.disliked = false;\n          }\n\n          await LikesService.addLike(credentials);\n          this.numberOfLikes++;\n          this.liked = true;\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    },\n\n    async addDislike() {\n      const credentials = {\n        PostId: this.id\n      };\n\n      try {\n        if (this.disliked) {\n          await DislikesService.deleteDislike(credentials.PostId);\n          this.numberOfDislikes--;\n          this.disliked = false;\n        } else {\n          if (this.liked) {\n            this.numberOfLikes--;\n            this.liked = false;\n          }\n\n          await DislikesService.addDislike(credentials);\n          this.numberOfDislikes++;\n          this.disliked = true;\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    },\n\n    togglePostUpdate() {\n      this.revealPostUpdate = !this.revealPostUpdate;\n    },\n\n    showPostUpdate() {\n      this.revealPostUpdate = !this.revealPostUpdate;\n    },\n\n    postWasUpdated($event) {\n      this.revealPostUpdate = false;\n      this.isModified = true;\n      let date = new Date();\n      let jour = date.getDate() < 10 ? `0${date.getDate()}` : date.getDate();\n      let mois = date.getMonth() + 1 < 10 ? `0${date.getMonth() + 1}` : date.getMonth() + 1;\n      let annee = date.getFullYear();\n      let heures = date.getHours() < 10 ? `0${date.getHours()}` : date.getHours();\n      let minutes = date.getMinutes() < 10 ? `0${date.getMinutes()}` : date.getMinutes();\n      this.updatedTime = `${jour}/${mois}/${annee} à ${heures}:${minutes}`;\n      this.updatedMediaUrl = $event.mediaUrl;\n      this.updatedContent = $event.content;\n    },\n\n    showBlockConfirmation() {\n      this.messageConfirmation = \"Êtes-vous sûr de vouloir supprimer ce post ?\";\n      this.revealConfirmation = !this.revealConfirmation;\n    },\n\n    toggleConfirmation() {\n      this.revealConfirmation = !this.revealConfirmation;\n    },\n\n    async deletePost() {\n      try {\n        const postId = this.id;\n        await PostsService.deletePost(postId);\n        this.isNotDeleted = false;\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n  },\n\n  beforeMount() {\n    UsersService.getUserData().then(res => {\n      this.user = res.data.data;\n      this.isAuthor();\n      this.isAdmin();\n      this.hasBeenModified();\n      this.computeLikes();\n      this.computeDislikes();\n      this.doUserLike();\n      this.doUserDislike();\n    }).catch(err => console.log(err));\n  }\n\n};","map":{"version":3,"mappings":";AAqGA,OAAOA,UAAP,MAAuB,6BAAvB;AACA,OAAOC,iBAAP,MAA8B,oCAA9B;AAEA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,eAAT,QAAgC,4BAAhC;AACA,OAAOC,cAAP,MAA2B,mCAA3B;AAEA,eAAe;EACbC,IAAI,EAAE,UADO;EAEbC,UAAU,EAAE;IACVR,UADU;IAEVC;EAFU,CAFC;EAMbQ,KAAK,EAAE;IACLC,EAAE,EAAE;MACFC,IAAI,EAAEC,MADJ;MAEFC,QAAQ,EAAE;IAFR,CADC;IAKLC,MAAM,EAAE;MACNH,IAAI,EAAEC,MADA;MAENC,QAAQ,EAAE;IAFJ,CALH;IASLE,SAAS,EAAE;MACTJ,IAAI,EAAEK,MADG;MAETH,QAAQ,EAAE;IAFD,CATN;IAaLI,QAAQ,EAAE;MACRN,IAAI,EAAEK,MADE;MAERH,QAAQ,EAAE;IAFF,CAbL;IAiBLK,SAAS,EAAE;MACTP,IAAI,EAAEK,MADG;MAETH,QAAQ,EAAE;IAFD,CAjBN;IAqBLM,SAAS,EAAE;MACTR,IAAI,EAAEK;IADG,CArBN;IAwBLI,QAAQ,EAAE;MACRT,IAAI,EAAEK;IADE,CAxBL;IA2BLK,OAAO,EAAE;MACPV,IAAI,EAAEK,MADC;MAEPH,QAAQ,EAAE;IAFH,CA3BJ;IA+BLS,QAAQ,EAAE;MACRX,IAAI,EAAEK;IADE,CA/BL;IAkCLO,KAAK,EAAE;MACLZ,IAAI,EAAEC,MADD;MAELY,OAAO,EAAE;IAFJ,CAlCF;IAsCLC,aAAa,EAAE;MACbd,IAAI,EAAEe;IADO,CAtCV;IAyCLC,QAAQ,EAAE;MACRhB,IAAI,EAAEC,MADE;MAERY,OAAO,EAAE;IAFD,CAzCL;IA6CLI,gBAAgB,EAAE;MAChBjB,IAAI,EAAEe;IADU;EA7Cb,CANM;;EAuDbG,IAAI,GAAG;IACL,OAAO;MACLC,IAAI,EAAE;QACJpB,EAAE,EAAE,IADA;QAEJK,SAAS,EAAE,IAFP;QAGJE,QAAQ,EAAE,IAHN;QAIJc,KAAK,EAAE,IAJH;QAKJX,QAAQ,EAAE,IALN;QAMJY,IAAI,EAAE;MANF,CADD;MASLC,SAAS,EAAE,KATN;MAULC,UAAU,EAAE,KAVP;MAWLC,YAAY,EAAE,IAXT;MAYLC,KAAK,EAAE,KAZF;MAaLC,QAAQ,EAAE,KAbL;MAcLC,eAAe,EAAEhC,cAdZ;MAeLiC,gBAAgB,EAAE,KAfb;MAgBLC,mBAAmB,EAAE,KAAK9B,EAhBrB;MAiBL+B,eAAe,EAAE,IAjBZ;MAkBLC,cAAc,EAAE,IAlBX;MAmBLC,WAAW,EAAE,IAnBR;MAoBLC,aAAa,EAAE,CApBV;MAqBLC,gBAAgB,EAAE,CArBb;MAsBLC,kBAAkB,EAAE,KAtBf;MAuBLC,mBAAmB,EAAE;IAvBhB,CAAP;EAyBD,CAjFY;;EAkFbC,OAAO,EAAE;IACPC,QAAQ,GAAG;MACT,IAAI,KAAKnC,MAAL,KAAgB,KAAKgB,IAAL,CAAUpB,EAA9B,EAAkC;QAChC,KAAKuB,SAAL,GAAiB,IAAjB;MACF;IACD,CALM;;IAMPiB,OAAO,GAAG;MACR,IAAI,KAAKpB,IAAL,CAAUE,IAAV,KAAmB,OAAvB,EAAgC;QAC9B,KAAKC,SAAL,GAAiB,IAAjB;MACF;IACD,CAVM;;IAWPkB,eAAe,GAAG;MAChB,IAAI,KAAKhC,SAAL,KAAmB,KAAKD,SAA5B,EAAuC;QACrC,KAAKgB,UAAL,GAAkB,IAAlB;MACF;IACD,CAfM;;IAgBPkB,YAAY,GAAG;MACb,KAAKR,aAAL,GAAqB,KAAKrB,KAA1B;IACD,CAlBM;;IAmBP8B,eAAe,GAAG;MAChB,KAAKR,gBAAL,GAAwB,KAAKlB,QAA7B;IACD,CArBM;;IAsBP2B,UAAU,GAAG;MACX,IAAIC,UAAS,GAAI,EAAjB;;MACA,KAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAK/B,aAAL,CAAmBgC,MAAvC,EAA+CD,CAAC,EAAhD,EAAoD;QAClDD,UAAU,CAACG,IAAX,CAAgB,KAAKjC,aAAL,CAAmB+B,CAAnB,EAAsBG,MAAtC;MACF;;MACA,IAAIJ,UAAU,CAACK,OAAX,CAAmB,KAAK9B,IAAL,CAAUpB,EAA7B,MAAqC,CAAC,CAA1C,EAA6C;QAC3C,KAAK0B,KAAL,GAAa,IAAb;MACF;IACD,CA9BM;;IA+BPyB,aAAa,GAAG;MACd,IAAIC,aAAY,GAAI,EAApB;;MACA,KAAK,IAAIN,IAAI,CAAb,EAAgBA,IAAI,KAAK5B,gBAAL,CAAsB6B,MAA1C,EAAkDD,CAAC,EAAnD,EAAuD;QACrDM,aAAa,CAACJ,IAAd,CAAmB,KAAK9B,gBAAL,CAAsB4B,CAAtB,EAAyBG,MAA5C;MACF;;MACA,IAAIG,aAAa,CAACF,OAAd,CAAsB,KAAK9B,IAAL,CAAUpB,EAAhC,MAAwC,CAAC,CAA7C,EAAgD;QAC9C,KAAK2B,QAAL,GAAgB,IAAhB;MACF;IACD,CAvCM;;IAwCP0B,UAAU,EAAGC,IAAD,IAAU;MACpB,OAAOA,IAAI,CAACC,KAAL,CAAW,GAAX,EAAgB,CAAhB,EAAmBA,KAAnB,CAAyB,GAAzB,EAA8BC,OAA9B,GAAwCC,IAAxC,CAA6C,GAA7C,CAAP;IACD,CA1CM;IA2CPC,UAAU,EAAGC,IAAD,IAAU;MACpB,OAAOA,IAAI,CAACJ,KAAL,CAAW,GAAX,EAAgB,CAAhB,EAAmBA,KAAnB,CAAyB,GAAzB,EAA8BK,KAA9B,CAAoC,CAApC,EAAuC,CAAvC,EAA0CH,IAA1C,CAA+C,GAA/C,CAAP;IACD,CA7CM;IA8CPI,QAAQ,EAAE,CAACxD,SAAD,EAAYE,QAAZ,KAAyB;MACjC,OAAOF,SAAQ,GAAI,GAAZ,GAAkBE,QAAzB;IACD,CAhDM;;IAiDP,MAAMuD,OAAN,GAAgB;MACd,MAAMC,WAAU,GAAI;QAClBC,MAAM,EAAE,KAAKhE;MADK,CAApB;;MAGA,IAAI;QACF,IAAI,KAAK0B,KAAT,EAAgB;UACd,MAAMhC,YAAY,CAACuE,UAAb,CAAwBF,WAAW,CAACC,MAApC,CAAN;UACA,KAAK9B,aAAL;UACA,KAAKR,KAAL,GAAa,KAAb;QACF,CAJA,MAIO;UACL,IAAI,KAAKC,QAAT,EAAmB;YACjB,KAAKQ,gBAAL;YACA,KAAKR,QAAL,GAAgB,KAAhB;UACF;;UACA,MAAMjC,YAAY,CAACoE,OAAb,CAAqBC,WAArB,CAAN;UACA,KAAK7B,aAAL;UACA,KAAKR,KAAL,GAAa,IAAb;QACF;MACF,CAdA,CAcE,OAAOwC,GAAP,EAAY;QACZC,OAAO,CAACC,GAAR,CAAYF,GAAZ;MACF;IACD,CAtEM;;IAuEP,MAAMG,UAAN,GAAmB;MACjB,MAAMN,WAAU,GAAI;QAClBC,MAAM,EAAE,KAAKhE;MADK,CAApB;;MAGA,IAAI;QACF,IAAI,KAAK2B,QAAT,EAAmB;UACjB,MAAMhC,eAAe,CAAC2E,aAAhB,CAA8BP,WAAW,CAACC,MAA1C,CAAN;UACA,KAAK7B,gBAAL;UACA,KAAKR,QAAL,GAAgB,KAAhB;QACF,CAJA,MAIO;UACL,IAAI,KAAKD,KAAT,EAAgB;YACd,KAAKQ,aAAL;YACA,KAAKR,KAAL,GAAa,KAAb;UACF;;UACA,MAAM/B,eAAe,CAAC0E,UAAhB,CAA2BN,WAA3B,CAAN;UACA,KAAK5B,gBAAL;UACA,KAAKR,QAAL,GAAgB,IAAhB;QACF;MACF,CAdA,CAcE,OAAOuC,GAAP,EAAY;QACZC,OAAO,CAACC,GAAR,CAAYF,GAAZ;MACF;IACD,CA5FM;;IA6FPK,gBAAgB,GAAG;MACjB,KAAK1C,gBAAL,GAAwB,CAAC,KAAKA,gBAA9B;IACD,CA/FM;;IAgGP2C,cAAc,GAAG;MACf,KAAK3C,gBAAL,GAAwB,CAAC,KAAKA,gBAA9B;IACD,CAlGM;;IAmGP4C,cAAc,CAACC,MAAD,EAAS;MACrB,KAAK7C,gBAAL,GAAwB,KAAxB;MACA,KAAKL,UAAL,GAAkB,IAAlB;MACA,IAAI8B,IAAG,GAAI,IAAIqB,IAAJ,EAAX;MACA,IAAIC,IAAG,GAAItB,IAAI,CAACuB,OAAL,KAAiB,EAAjB,GAAuB,IAAGvB,IAAI,CAACuB,OAAL,EAAe,EAAzC,GAA6CvB,IAAI,CAACuB,OAAL,EAAxD;MACA,IAAIC,IAAG,GACLxB,IAAI,CAACyB,QAAL,KAAkB,CAAlB,GAAsB,EAAtB,GACK,IAAGzB,IAAI,CAACyB,QAAL,KAAkB,CAAE,EAD5B,GAEIzB,IAAI,CAACyB,QAAL,KAAkB,CAHxB;MAIA,IAAIC,KAAI,GAAI1B,IAAI,CAAC2B,WAAL,EAAZ;MACA,IAAIC,MAAK,GACP5B,IAAI,CAAC6B,QAAL,KAAkB,EAAlB,GAAwB,IAAG7B,IAAI,CAAC6B,QAAL,EAAgB,EAA3C,GAA+C7B,IAAI,CAAC6B,QAAL,EADjD;MAEA,IAAIC,OAAM,GACR9B,IAAI,CAAC+B,UAAL,KAAoB,EAApB,GAA0B,IAAG/B,IAAI,CAAC+B,UAAL,EAAkB,EAA/C,GAAmD/B,IAAI,CAAC+B,UAAL,EADrD;MAEA,KAAKpD,WAAL,GAAoB,GAAE2C,IAAK,IAAGE,IAAK,IAAGE,KAAK,MAAME,MAAO,IAAGE,OAAQ,EAAnE;MACA,KAAKrD,eAAL,GAAuB2C,MAAM,CAAC9D,QAA9B;MACA,KAAKoB,cAAL,GAAsB0C,MAAM,CAAC/D,OAA7B;IACD,CApHM;;IAqHP2E,qBAAqB,GAAG;MACtB,KAAKjD,mBAAL,GAA2B,8CAA3B;MACA,KAAKD,kBAAL,GAA0B,CAAC,KAAKA,kBAAhC;IACD,CAxHM;;IAyHPmD,kBAAkB,GAAG;MACnB,KAAKnD,kBAAL,GAA0B,CAAC,KAAKA,kBAAhC;IACD,CA3HM;;IA4HP,MAAMoD,UAAN,GAAmB;MACjB,IAAI;QACF,MAAMC,MAAK,GAAI,KAAKzF,EAApB;QACA,MAAMP,YAAY,CAAC+F,UAAb,CAAwBC,MAAxB,CAAN;QACA,KAAKhE,YAAL,GAAoB,KAApB;MACF,CAJA,CAIE,OAAOyC,GAAP,EAAY;QACZC,OAAO,CAACC,GAAR,CAAYF,GAAZ;MACF;IACD;;EApIM,CAlFI;;EAwNbwB,WAAW,GAAG;IACZlG,YAAY,CAACmG,WAAb,GACGC,IADH,CACSC,GAAD,IAAS;MACb,KAAKzE,IAAL,GAAYyE,GAAG,CAAC1E,IAAJ,CAASA,IAArB;MACA,KAAKoB,QAAL;MACA,KAAKC,OAAL;MACA,KAAKC,eAAL;MACA,KAAKC,YAAL;MACA,KAAKC,eAAL;MACA,KAAKC,UAAL;MACA,KAAKO,aAAL;IACD,CAVH,EAWG2C,KAXH,CAWU5B,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAXlB;EAYD;;AArOY,CAAf","names":["PostUpdate","BlockConfirmation","UsersService","PostsService","LikesService","DislikesService","profilePicture","name","components","props","id","type","Number","required","userId","firstname","String","lastname","createdAt","updatedAt","imageUrl","content","mediaUrl","likes","default","usersWhoLiked","Array","dislikes","usersWhoDisliked","data","user","email","role","isAllowed","isModified","isNotDeleted","liked","disliked","defautlImageUrl","revealPostUpdate","idOfThePostToUpdate","updatedMediaUrl","updatedContent","updatedTime","numberOfLikes","numberOfDislikes","revealConfirmation","messageConfirmation","methods","isAuthor","isAdmin","hasBeenModified","computeLikes","computeDislikes","doUserLike","likedArray","k","length","push","UserId","indexOf","doUserDislike","dislikedArray","dateFormat","date","split","reverse","join","timeFormat","time","slice","username","addLike","credentials","PostId","deleteLike","err","console","log","addDislike","deleteDislike","togglePostUpdate","showPostUpdate","postWasUpdated","$event","Date","jour","getDate","mois","getMonth","annee","getFullYear","heures","getHours","minutes","getMinutes","showBlockConfirmation","toggleConfirmation","deletePost","postId","beforeMount","getUserData","then","res","catch"],"sourceRoot":"","sources":["/Users/clementstorne/Google Drive/OpenClassrooms/Dev-web/P7/groupomania-code/front/src/components/PostShow.vue"],"sourcesContent":["<template>\n  <div class=\"post container my-4\" v-if=\"isNotDeleted\">\n    <div class=\"col-12\">\n      <div class=\"post-header\">\n        <div class=\"post-header-informations\">\n          <div class=\"post-header-informations-profile-picture\">\n            <img\n              :src=\"imageUrl\"\n              alt=\"Photo de profil de l'utilisateur\"\n              v-if=\"imageUrl\"\n            />\n            <img\n              :src=\"defautlImageUrl\"\n              alt=\"Photo de profil de l'utilisateur\"\n              v-else\n            />\n          </div>\n          <div class=\"post-header-informations-text\">\n            <p class=\"post-header-informations-text-author\">\n              {{ username(firstname, lastname) }}\n            </p>\n            <p\n              class=\"post-header-informations-text-published\"\n              v-if=\"updatedTime\"\n            >\n              Modifié le {{ updatedTime }}\n            </p>\n            <p\n              class=\"post-header-informations-text-published\"\n              v-else-if=\"isModified\"\n            >\n              Modifié le {{ dateFormat(updatedAt) }} à\n              {{ timeFormat(updatedAt) }}\n            </p>\n            <p class=\"post-header-informations-text-published\" v-else>\n              Publié le {{ dateFormat(createdAt) }} à\n              {{ timeFormat(createdAt) }}\n            </p>\n          </div>\n        </div>\n        <div class=\"post-header-parameters\">\n          <span\n            class=\"post-header-parameters-edit\"\n            @click=\"showPostUpdate\"\n            v-if=\"isAllowed\"\n            >🖊</span\n          >\n          <span\n            class=\"post-header-parameters-delete\"\n            @click=\"showBlockConfirmation\"\n            v-if=\"isAllowed\"\n            >🗑</span\n          >\n        </div>\n      </div>\n    </div>\n    <div class=\"post-body\">\n      <p class=\"text-start\">\n        {{ updatedContent || content }}\n      </p>\n      <img\n        :src=\"updatedMediaUrl\"\n        alt=\"null\"\n        v-if=\"updatedMediaUrl\"\n        class=\"post-img\"\n      />\n      <img :src=\"mediaUrl\" alt=\"null\" v-else-if=\"mediaUrl\" class=\"post-img\" />\n    </div>\n    <div class=\"post-interactions row\">\n      <div class=\"post-interactions-like col-6 text-center\">\n        <p class=\"post-interactions-count\" @click.prevent=\"addLike\">\n          👍\n          <span v-if=\"liked\" class=\"liked\">{{ numberOfLikes }}</span>\n          <span v-else> {{ numberOfLikes }}</span>\n        </p>\n      </div>\n      <div class=\"post-interactions-comment col-6 text-center\">\n        <p class=\"post-interactions-count\" @click.prevent=\"addDislike\">\n          👎 <span v-if=\"disliked\" class=\"liked\">{{ numberOfDislikes }}</span>\n          <span v-else> {{ numberOfDislikes }}</span>\n        </p>\n      </div>\n    </div>\n\n    <PostUpdate\n      :reveal-post-update=\"revealPostUpdate\"\n      :toggle-post-update=\"togglePostUpdate\"\n      :post-id=\"idOfThePostToUpdate\"\n      v-on:postUpdated=\"postWasUpdated\"\n    />\n\n    <BlockConfirmation\n      :reveal-confirmation=\"revealConfirmation\"\n      :toggle-confirmation=\"toggleConfirmation\"\n      :message-confirmation=\"messageConfirmation\"\n      @action=\"deletePost\"\n    />\n  </div>\n</template>\n\n<script>\nimport PostUpdate from \"@/components/PostUpdate.vue\";\nimport BlockConfirmation from \"@/components/BlockConfirmation.vue\";\n\nimport { UsersService } from \"@/services/UsersService\";\nimport { PostsService } from \"@/services/PostsService\";\nimport { LikesService } from \"@/services/LikesService\";\nimport { DislikesService } from \"@/services/DislikesService\";\nimport profilePicture from \"@/assets/user-profile-picture.png\";\n\nexport default {\n  name: \"PostShow\",\n  components: {\n    PostUpdate,\n    BlockConfirmation,\n  },\n  props: {\n    id: {\n      type: Number,\n      required: true,\n    },\n    userId: {\n      type: Number,\n      required: true,\n    },\n    firstname: {\n      type: String,\n      required: true,\n    },\n    lastname: {\n      type: String,\n      required: true,\n    },\n    createdAt: {\n      type: String,\n      required: true,\n    },\n    updatedAt: {\n      type: String,\n    },\n    imageUrl: {\n      type: String,\n    },\n    content: {\n      type: String,\n      required: true,\n    },\n    mediaUrl: {\n      type: String,\n    },\n    likes: {\n      type: Number,\n      default: 0,\n    },\n    usersWhoLiked: {\n      type: Array,\n    },\n    dislikes: {\n      type: Number,\n      default: 0,\n    },\n    usersWhoDisliked: {\n      type: Array,\n    },\n  },\n  data() {\n    return {\n      user: {\n        id: null,\n        firstname: null,\n        lastname: null,\n        email: null,\n        imageUrl: null,\n        role: null,\n      },\n      isAllowed: false,\n      isModified: false,\n      isNotDeleted: true,\n      liked: false,\n      disliked: false,\n      defautlImageUrl: profilePicture,\n      revealPostUpdate: false,\n      idOfThePostToUpdate: this.id,\n      updatedMediaUrl: null,\n      updatedContent: null,\n      updatedTime: null,\n      numberOfLikes: 0,\n      numberOfDislikes: 0,\n      revealConfirmation: false,\n      messageConfirmation: \"\",\n    };\n  },\n  methods: {\n    isAuthor() {\n      if (this.userId === this.user.id) {\n        this.isAllowed = true;\n      }\n    },\n    isAdmin() {\n      if (this.user.role === \"admin\") {\n        this.isAllowed = true;\n      }\n    },\n    hasBeenModified() {\n      if (this.updatedAt !== this.createdAt) {\n        this.isModified = true;\n      }\n    },\n    computeLikes() {\n      this.numberOfLikes = this.likes;\n    },\n    computeDislikes() {\n      this.numberOfDislikes = this.dislikes;\n    },\n    doUserLike() {\n      let likedArray = [];\n      for (let k = 0; k < this.usersWhoLiked.length; k++) {\n        likedArray.push(this.usersWhoLiked[k].UserId);\n      }\n      if (likedArray.indexOf(this.user.id) !== -1) {\n        this.liked = true;\n      }\n    },\n    doUserDislike() {\n      let dislikedArray = [];\n      for (let k = 0; k < this.usersWhoDisliked.length; k++) {\n        dislikedArray.push(this.usersWhoDisliked[k].UserId);\n      }\n      if (dislikedArray.indexOf(this.user.id) !== -1) {\n        this.disliked = true;\n      }\n    },\n    dateFormat: (date) => {\n      return date.split(\"T\")[0].split(\"-\").reverse().join(\"/\");\n    },\n    timeFormat: (time) => {\n      return time.split(\"T\")[1].split(\":\").slice(0, 2).join(\":\");\n    },\n    username: (firstname, lastname) => {\n      return firstname + \" \" + lastname;\n    },\n    async addLike() {\n      const credentials = {\n        PostId: this.id,\n      };\n      try {\n        if (this.liked) {\n          await LikesService.deleteLike(credentials.PostId);\n          this.numberOfLikes--;\n          this.liked = false;\n        } else {\n          if (this.disliked) {\n            this.numberOfDislikes--;\n            this.disliked = false;\n          }\n          await LikesService.addLike(credentials);\n          this.numberOfLikes++;\n          this.liked = true;\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    },\n    async addDislike() {\n      const credentials = {\n        PostId: this.id,\n      };\n      try {\n        if (this.disliked) {\n          await DislikesService.deleteDislike(credentials.PostId);\n          this.numberOfDislikes--;\n          this.disliked = false;\n        } else {\n          if (this.liked) {\n            this.numberOfLikes--;\n            this.liked = false;\n          }\n          await DislikesService.addDislike(credentials);\n          this.numberOfDislikes++;\n          this.disliked = true;\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    },\n    togglePostUpdate() {\n      this.revealPostUpdate = !this.revealPostUpdate;\n    },\n    showPostUpdate() {\n      this.revealPostUpdate = !this.revealPostUpdate;\n    },\n    postWasUpdated($event) {\n      this.revealPostUpdate = false;\n      this.isModified = true;\n      let date = new Date();\n      let jour = date.getDate() < 10 ? `0${date.getDate()}` : date.getDate();\n      let mois =\n        date.getMonth() + 1 < 10\n          ? `0${date.getMonth() + 1}`\n          : date.getMonth() + 1;\n      let annee = date.getFullYear();\n      let heures =\n        date.getHours() < 10 ? `0${date.getHours()}` : date.getHours();\n      let minutes =\n        date.getMinutes() < 10 ? `0${date.getMinutes()}` : date.getMinutes();\n      this.updatedTime = `${jour}/${mois}/${annee} à ${heures}:${minutes}`;\n      this.updatedMediaUrl = $event.mediaUrl;\n      this.updatedContent = $event.content;\n    },\n    showBlockConfirmation() {\n      this.messageConfirmation = \"Êtes-vous sûr de vouloir supprimer ce post ?\";\n      this.revealConfirmation = !this.revealConfirmation;\n    },\n    toggleConfirmation() {\n      this.revealConfirmation = !this.revealConfirmation;\n    },\n    async deletePost() {\n      try {\n        const postId = this.id;\n        await PostsService.deletePost(postId);\n        this.isNotDeleted = false;\n      } catch (err) {\n        console.log(err);\n      }\n    },\n  },\n  beforeMount() {\n    UsersService.getUserData()\n      .then((res) => {\n        this.user = res.data.data;\n        this.isAuthor();\n        this.isAdmin();\n        this.hasBeenModified();\n        this.computeLikes();\n        this.computeDislikes();\n        this.doUserLike();\n        this.doUserDislike();\n      })\n      .catch((err) => console.log(err));\n  },\n};\n</script>\n\n<style scoped lang=\"scss\">\n.post {\n  background: $white;\n  border-radius: 9px;\n  padding: 12px 16px 0;\n  &-header {\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: space-between;\n    align-items: flex-start;\n    &-informations {\n      display: flex;\n      flex-flow: row nowrap;\n      &-profile-picture img {\n        width: 40px;\n        height: 40px;\n        object-fit: cover;\n        border-radius: 50%;\n      }\n      &-text {\n        display: flex;\n        flex-flow: column nowrap;\n        justify-content: flex-start;\n        align-items: flex-start;\n        margin-left: 10px;\n        &-author {\n          font-size: 18px;\n          font-weight: 900;\n          margin-bottom: 0;\n          color: $color-primary;\n          &:hover {\n            color: darken($color-primary, 5%);\n            cursor: pointer;\n          }\n        }\n        &-published {\n          font-size: 12px;\n          color: $dark-gray;\n          margin-bottom: 0;\n        }\n      }\n    }\n    &-parameters {\n      &-edit {\n        margin-right: 20px;\n        cursor: pointer;\n      }\n      &-delete {\n        cursor: pointer;\n      }\n    }\n  }\n  &-body {\n    margin: 12px 0;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    & p {\n      width: 100%;\n    }\n    & img {\n      text-align: center;\n      max-width: 80%;\n    }\n  }\n  &-interactions {\n    height: 34px;\n    margin: 0;\n    padding: 4px 0;\n    border-top: solid $medium-gray 1px;\n    color: $dark-gray;\n    font-weight: 600;\n    &-count:hover {\n      color: $color-primary;\n      font-weight: 900;\n      cursor: pointer;\n    }\n  }\n  &-comment {\n    margin: 12px 0;\n    border-radius: 18px;\n    padding: 8px 16px;\n    background: $gray;\n    border: none;\n    &:focus {\n      box-shadow: 0px 0px 0px 4px rgba($color-primary, 0.5);\n      outline: none;\n    }\n  }\n}\n\n.liked {\n  color: $color-primary;\n  font-weight: 900;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}